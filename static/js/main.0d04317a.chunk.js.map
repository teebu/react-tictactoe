{"version":3,"sources":["logo.svg","Game.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","props","className","winningClass","onClick","value","Board","createBoard","curSquare","board","row","columns","col","push","renderSquare","key","i","this","winnerRow","includes","squares","React","Component","initial_state","history","Array","fill","stepNumber","xIsNext","sortHistoryAsc","Game","state","setState","slice","length","calculateWinner","winner","concat","coordinates","getCoordinates","step","current","NewGame","SortButton","handleSortClick","toString","sortedHistory","reverse","status","moves","map","move","player","buttonClass","desc","jumpTo","handleClick","Math","floor","lines","a","b","c","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0d04317a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nfunction Square(props) {\n  return (\n    <button className={`square ${props.winningClass}`} onClick={props.onClick}>\n      {props.value}\n    </button>\n  )\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    const winningClass =\n      this.props.winnerRow && this.props.winnerRow.includes(i)\n        ? 'bold-text'\n        : ''\n\n    return (\n      <Square\n        key={i}\n        value={this.props.squares[i]}\n        winningClass={winningClass}\n        onClick={() => this.props.onClick(i)}\n      />\n    )\n  }\n\n  createBoard = () => {\n    let curSquare = 0\n    const board = []\n\n    for (let row = 0; row < 3; row++) {\n      // for each row\n      const columns = []\n      for (let col = 0; col < 3; col++) {\n        // for each col\n        columns.push(this.renderSquare(curSquare++))\n      }\n      board.push(\n        <div key={row} className='board-row'>\n          {columns}\n        </div>\n      )\n    }\n    return board\n  }\n\n  render() {\n    return <div>{this.createBoard()}</div>\n  }\n}\n\nconst initial_state = {\n  history: [\n    {\n      squares: Array(9).fill(null),\n    },\n  ],\n  stepNumber: 0,\n  xIsNext: true,\n  sortHistoryAsc: true,\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = initial_state\n  }\n\n  handleSortClick() {\n    this.setState({\n      sortHistoryAsc: !this.state.sortHistoryAsc,\n    })\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1)\n    const current = history[history.length - 1]\n    const squares = current.squares.slice()\n    if (calculateWinner(squares).winner || squares[i]) {\n      return\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O'\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n          coordinates: getCoordinates(i),\n        },\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    })\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n    })\n  }\n\n  render() {\n    const history = this.state.history\n    const current = history[this.state.stepNumber]\n    const { winner, winnerRow } = calculateWinner(current.squares)\n\n    const NewGame = (\n      <button onClick={() => this.setState(initial_state)}>New Game</button>\n    )\n\n    const SortButton = (\n      <button onClick={() => this.handleSortClick()}>\n        Sort Asc: {this.state.sortHistoryAsc.toString()}\n      </button>\n    )\n\n    let sortedHistory = [...history] // copy history\n    if (this.state.sortHistoryAsc === false)\n      sortedHistory = sortedHistory.reverse()\n\n    const moves = sortedHistory.map((step, move) => {\n      if (this.state.sortHistoryAsc === false)\n        move = sortedHistory.length - 1 - move\n      const player = move % 2 === 0 ? 'X' : 'O'\n      const buttonClass = this.state.stepNumber == move ? 'bold-text' : ''\n      const coordinates = step.coordinates ? step.coordinates : ''\n      const desc = move ? `Go to move #${move}` : 'Go to game start'\n\n      return (\n        <li key={move}>\n          <button className={buttonClass} onClick={() => this.jumpTo(move)}>\n            {`${desc} Player: ${player} ${coordinates}`}\n          </button>\n        </li>\n      )\n    })\n\n    let status\n    if (winner) {\n      status = `Winner: ${winner}`\n    } else if (this.state.history.length === 10) {\n      // if no winner and history length is 10\n      status = 'Game Over! No Winner!'\n    } else {\n      status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`\n    }\n\n    return (\n      <div className='game'>\n        <div className='game-board'>\n          <Board\n            squares={current.squares}\n            winnerRow={winnerRow}\n            onClick={i => this.handleClick(i)}\n          />\n        </div>\n        <div className='game-info'>\n          <div>{status}</div>\n          <div>\n            {NewGame} {SortButton}\n          </div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst getCoordinates = move => {\n  return `[row:${Math.floor(move / 3) + 1}, col:${(move % 3) + 1}]`\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ]\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i]\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return { winner: squares[a], winnerRow: lines[i] }\n    }\n  }\n  return { winner: null, winnerRow: null }\n}\n// ========================================\n\n\nexport default Game;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from \"./Game\";\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}